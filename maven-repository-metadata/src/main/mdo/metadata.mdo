<model>
  <id>repository-metadata</id>
  <name>Metadata</name>
  <description>Per-directory repository metadata.</description>
  <defaults>
    <default>
      <key>package</key>
      <value>org.apache.maven.artifact.repository.metadata</value>
    </default>
  </defaults>
  <classes>
    <class rootElement="true">
      <name>Metadata</name>
      <version>1.0.0</version>
      <fields>
        <field>
          <name>groupId</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>The groupId that is directory represents, if any.</description>
        </field>
        <field>
          <name>artifactId</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>The artifactId that is directory represents, if any.</description>
        </field>
        <field>
          <name>version</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>The version that is directory represents, if any.</description>
        </field>
        <field>
          <name>versioning</name>
          <version>1.0.0</version>
          <association>
            <type>Versioning</type>
          </association>
          <description>Versioning information for the artifact.</description>
        </field>
        <field>
          <name>plugins</name>
          <version>1.0.0</version>
          <description>The set of plugin mappings for the group</description>
          <association>
            <type>Plugin</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0</version>
          <code><![CDATA[
            public boolean merge( Metadata sourceMetadata )
            {
                boolean changed = false;

                for ( Iterator i = sourceMetadata.getPlugins().iterator(); i.hasNext(); )
                {
                    Plugin plugin = (Plugin) i.next();
                    boolean found = false;

                    for ( Iterator it = getPlugins().iterator(); it.hasNext() && !found; )
                    {
                        Plugin preExisting = (Plugin) it.next();

                        if ( preExisting.getPrefix().equals( plugin.getPrefix() ) )
                        {
                            found = true;
                        }
                    }

                    if ( !found )
                    {
                        Plugin mappedPlugin = new Plugin();

                        mappedPlugin.setArtifactId( plugin.getArtifactId() );

                        mappedPlugin.setPrefix( plugin.getPrefix() );

                        addPlugin( mappedPlugin );

                        changed = true;
                    }
                }

                Versioning versioning = sourceMetadata.getVersioning();
                if ( versioning != null )
                {
                    Versioning v = getVersioning();
                    if ( v != null )
                    {
                        if ( versioning.getRelease() != null )
                        {
                            changed = true;
                            v.setRelease( versioning.getRelease() );
                        }
                        if ( versioning.getLatest() != null )
                        {
                            changed = true;
                            v.setLatest( versioning.getLatest() );
                        }
                        for ( Iterator i = versioning.getVersions().iterator(); i.hasNext(); )
                        {
                            String version = (String) i.next();
                            if ( !v.getVersions().contains( version ) )
                            {
                                changed = true;
                                v.getVersions().add( version );
                            }
                        }

                        Snapshot s = v.getSnapshot();
                        Snapshot snapshot = versioning.getSnapshot();
                        if ( snapshot != null )
                        {
                            if ( s == null )
                            {
                                v.setSnapshot( snapshot );
                                changed = true;
                            }
                            else if ( snapshot.isLocalCopy() )
                            {
                                s.setLocalCopy( true );
                                s.setTimestamp( null );
                                s.setBuildNumber( 0 );
                                changed = true;
                            }
                            else
                            {
                                if ( snapshot.getTimestamp() != null && !snapshot.getTimestamp().equals( s.getTimestamp() ) )
                                {
                                    s.setTimestamp( snapshot.getTimestamp() );
                                    changed = true;
                                }
                                if ( snapshot.getBuildNumber() > 0 && s.getBuildNumber() != snapshot.getBuildNumber() )
                                {
                                    s.setBuildNumber( snapshot.getBuildNumber() );
                                    changed = true;
                                }
                                if ( s.isLocalCopy() )
                                {
                                    s.setLocalCopy( false );
                                    changed = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        setVersioning( versioning );
                        changed = true;
                    }
                }
                return changed;
            }
          ]]></code>
        </codeSegment>
      </codeSegments>
    </class>
    <class>
      <name>Versioning</name>
      <version>1.0.0</version>
      <description>Versioning information for an artifact</description>
      <fields>
        <field>
          <name>latest</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>What the latest version in the directory is, including snapshots</description>
        </field>
        <field>
          <name>release</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>What the latest version in the directory is, of the releases</description>
        </field>
        <field>
          <name>snapshot</name>
          <version>1.0.0</version>
          <association>
            <type>Snapshot</type>
          </association>
          <description>The current snapshot data in use for this version</description>
        </field>
        <field>
          <name>versions</name>
          <version>1.0.0</version>
          <description>Versions available for the artifact</description>
          <association>
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
      </fields>
    </class>
    <class>
      <name>Snapshot</name>
      <version>1.0.0</version>
      <description>Snapshot data for the current version</description>
      <fields>
        <field>
          <name>timestamp</name>
          <version>1.0.0</version>
          <description>The time it was deployed</description>
          <type>String</type>
        </field>
        <field>
          <name>buildNumber</name>
          <version>1.0.0</version>
          <description>The incremental build number</description>
          <type>int</type>
        </field>
        <field>
          <name>localCopy</name>
          <version>1.0.0</version>
          <description>Whether to use a local copy instead (with filename that includes the base version)</description>
          <type>boolean</type>
          <defaultValue>false</defaultValue>
        </field>
      </fields>
    </class>
    <class>
      <name>Plugin</name>
      <version>1.0.0</version>
      <description>Mapping information for a single plugin within this group</description>
      <comment>NOTE: plugin version is _NOT_ included here, since it is resolved using a separate algorithm.</comment>
      <fields>
        <field>
          <name>prefix</name>
          <type>String</type>
          <required>true</required>
          <version>1.0.0</version>
          <description>The plugin invocation prefix (i.e. eclipse for eclipse:eclipse)</description>
        </field>
        <field>
          <name>artifactId</name>
          <type>String</type>
          <required>true</required>
          <version>1.0.0</version>
          <description>The plugin artifactId</description>
        </field>
      </fields>
    </class>
  </classes>
</model>
