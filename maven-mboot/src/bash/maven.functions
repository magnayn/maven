# -----------------------------------------------------------------------------
# Maven functions
#
# @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
# -----------------------------------------------------------------------------

isCommandSuccessful()
{
  # $1 == $?
  # $2 == Error message on failure
  
  ret=$1
  if [ $ret != 0 ]; then  
    echo $2
    exit $ret
  fi
}

runJava()
{
  # $1 == classpath
  # $2 == Main class
  # $3 == Mail args

  if $cygwin; then
    CP=`cygpath -pw "$1"`
  else
    CP=$1
  fi
  
  "${JAVACMD}" -classpath "$CP" $2 "$3"
}

runTests()
{
#  TO DO 
}

compile()
{
  # $1 == classpath
  # $2 == destination for compiled classes
  # $3 == source directory
  # $4 == any extra sources
  
  if [ -d $3 ]
  then
  
    if [ ! -d $2 ]
    then
      mkdir -p $2 
    fi
  
    SOURCES=`find $3 -name '*.java'`

    if $cygwin; then
      CP=`cygpath -pw "$1"`
    else
      CP=$1
    fi
  
    "${JAVAC}" -classpath "$CP" -d $2 ${SOURCES} $4
  fi
}

buildJar()
{
  # $1 == directory to JAR
  # $2 == JAR path relative to the cwd

  (
    dir=`pwd`
    cd $1
    if $cygwin; then
      JARFILE=`cygpath -pw ${dir}/$2`
    else
      JARFILE=${dir}/$2
    fi
  
    ${JAVA_HOME}/bin/jar -cf $JARFILE * 
  )
}

buildMavenProject()
{
    # 1. Parse the model
    # 2. Download any required dependencies
    # 3. Compile the sources
    # 4. Move required resources into location
    # 5. Create JAR.
    
    # I can use maven-model and I can detach maven-model-tools from
    # Plexus so that I can use it for this tool. I can just use the 
    # command line compiler for now.

    # $1 == directory where project lives
    # $4 == jar name
    # $5 == flag to leave mboot files
    
    (
      home=`pwd`
      
      cd $1
      
      # Look for source directory in project.xml
      sourceDirectory=`grep sourceDirectory project.xml | sed -e 's/^*//;s/<sourceDirectory>//;s/<\/sourceDirectory>//;s/\${basedir}\///'`

      [ -z $sourceDirectory ] && sourceDirectory=src/main

      buildDir=target
      buildDest=target/classes
      
      # Look for unit test source directory in project.xml
      unitTestSourceDirectory=`grep unitTestSourceDirectory project.xml | sed -e 's/^*//;s/<unitTestSourceDirectory>//;s/<\/unitTestSourceDirectory>//;s/\${basedir}\///'`

      [ -z $unitTestSourceDirectory ] && unitTestSourceDirectory=src/test
      
      buildTestDest=target/test-classes
      
      [ -d $buildDir ] && rm -rf $buildDir
      
      echo "Building project in `pwd`"
        
      if $cygwin = true; then
        home=`cygpath -pw $home`
      fi

      runJava ${MBOOT_HOME}/classes Bootstrapper ${home}
      
      isCommandSuccessful $? "Failed running project parser!"
      
      projectDependencyClassPath=`cat bootstrap.classpath`:.
      
      if [ ! -z $sourceDirectory ] && [ -d $sourceDirectory ]
      then
        
        compile $projectDependencyClassPath $buildDest $sourceDirectory
      
        isCommandSuccessful $? "Failed compiling classes!"
      
      fi
      
      repoLocal=`cat bootstrap.repo`
      
      if $cygwin = true; then
        repoLocal=`cygpath -pu "$repoLocal"`
      fi

      if [ ! -z $unitTestSourceDirectory ] && [ -d $unitTestSourceDirectory ]
      then
        
        compile "$buildDest:$projectDependencyClassPath:$repoLocal/junit/jars/junit-3.8.1.jar" $buildTestDest $unitTestSourceDirectory      
        isCommandSuccessful $? "Failed compiling test classes!"
      
      fi
      
      copyResources
      
      runTests
      
      if [ "$2" = "default" ]
      then
        jarName=`getJarName project.xml`
      else
        jarName=$2
      fi
      
      buildJar $buildDest target/${jarName}
      
      if [ -z $3 ]
      then
        rm -f bootstrap.classpath > /dev/null 2>&1
        rm -f bootstrap.libs > /dev/null 2>&1
        rm -f bootstrap.resources > /dev/null 2>&1
        rm -f bootstrap.repo > /dev/null 2>&1
      fi
    )
}

getJarName()
{
  # $1 == project.xml
  
  version=`cat $1 | tr '\n' ' ' | sed 's#<versions>.*</versions>##' | sed 's#<dependencies>.*</dependencies>##' | grep '<version>' | sed -e 's#^.*<version>##;s#</version>.*$##'`

  if [ -z $version ]
  then
    version=`grep currentVersion $1 | sed -e 's/^ *//;s/<currentVersion>//;s/<\/currentVersion>//'`
  fi

  artifactId=`cat $1 | tr '\n' ' ' | sed 's#<dependencies>.*</dependencies>##' | grep '<artifactId>' | sed -e 's#^.*<artifactId>##;s#</artifactId>.*$##'`

  if [ -z $artifactId ]
  then
    artifactId=`cat $1 | tr '\n' ' ' | sed 's#<versions>.*</versions>##' | sed 's#<developers>.*</developers>##' | sed 's#<dependencies>.*</dependencies>##' | grep '<id>' | sed -e 's#^.*<id>##;s#</id>.*$##'`
  fi
  
  jarName="${artifactId}-${version}.jar"
  
  echo $jarName
}

copyResources()
{
  resources=`cat bootstrap.resources`
  
  for i in $resources
  do
    directory=`echo $i | awk 'BEGIN { FS = "@" } { print $1 }' | awk 'BEGIN { FS = "," } { print $1 }'`
    targetPath=`echo $i | awk 'BEGIN { FS = "@" } { print $1 }' | awk 'BEGIN { FS = "," } { print $2 }'`
    includes=`echo $i | awk 'BEGIN { FS = "@" } { print $2 }' | awk 'BEGIN { FS = "," } { for ( j = 1; j <= NF; j++ ) { printf( "%s ", $j ) } }'`
    
    for include in $includes
    do
      files=`eval "find $directory -name $include"`
      
      for file in $files
      do
        # Replace the "/" with "@" to prevent shell expansion of *.properties
        # to *.properties in the CWD.
        tmpDirectory=`echo $directory | sed "s/\//@/g"`
        tmpFile=`echo $file | sed "s/\//@/g"`
        
        # Now grab the path excluding the original directory so we can translate that
        # path into the target directory.
        path=`echo $tmpFile | sed "s/$tmpDirectory//;s/\@/\//g;s/^\///"`

        targetDirectory="target/classes"

        [ ! -z $MBOOT_DEBUG ] && echo "path = $path"

        [ ! -z $path ] && translatedPath=`dirname $path`

        [ ! -z $MBOOT_DEBUG ] && echo "translatedPath = $translatedPath"

        if [ ! -z $targetPath ]
        then
          [ ! -z $MBOOT_DEBUG ] && echo "targetPath = $targetPath"
          targetDirectory="${targetDirectory}/${targetPath}/${translatedPath}"
        else
          targetDirectory="${targetDirectory}/${translatedPath}"
        fi
        
        [ ! -z $MBOOT_DEBUG ] && echo "targetDirectory = $targetDirectory"
        
        [ ! -d $targetDirectory ] && mkdir -p $targetDirectory
        
        cp $file $targetDirectory > /dev/null 2>&1
        
      done
    done
  done
  
  find target/classes -name 'CVS*' -exec rm -rf {} > /dev/null 2>&1 \;
}

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  Darwin*) darwin=true
           if [ -z "$JAVA_HOME" ] ; then
             JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home   
           fi
           ;;
esac

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# You will need to specify JAVA_HOME if compiling with 1.2 or later.

if [ -n "$JAVA_HOME" ] ; then
  if [ -f "$JAVA_HOME/lib/tools.jar" ] ; then
    CLASSPATH=$CLASSPATH:$JAVA_HOME/lib/tools.jar
  fi

  if [ -f "$JAVA_HOME/lib/classes.zip" ] ; then
    CLASSPATH=$CLASSPATH:$JAVA_HOME/lib/classes.zip
  fi
else
  echo "Warning: JAVA_HOME environment variable not set."
  echo "  If build fails because sun.* classes could not be found"
  echo "  you will need to set the JAVA_HOME environment variable"
  echo "  to the installation directory of java."
fi

# IBM's JDK on AIX uses strange locations for the executables:
# JAVA_HOME/jre/sh for java and rmid
# JAVA_HOME/sh for javac and rmic
if [ -z "$JAVAC" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/sh/javac" ] ; then
      JAVAC=${JAVA_HOME}/sh/javac;
    else
      JAVAC=${JAVA_HOME}/bin/javac;
    fi
  else
    JAVAC=javac
  fi
fi
if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      JAVACMD=$JAVA_HOME/jre/sh/java
    else
      JAVACMD=$JAVA_HOME/bin/java
    fi
  else
    JAVACMD=java
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly."
  echo "  We cannot execute $JAVACMD"
  exit
fi

# For Cygwin, switch to Windows format before running java
if $cygwin; then
  CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
fi

export CLASSPATH
