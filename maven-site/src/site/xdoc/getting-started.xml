<document>
  <properties>
    <title>Getting Started</title>
    <author email="brett@apache.org">Brett Porter</author>
  </properties>
  <body>
    <section name="Getting Started">
      <p>
        This section will help you create a trivial project, and build it, and should provide enough information
        to build any project that requires Maven 2.0. It assumed that you have already
        <a href="download.html">Downloaded and Installed</a> a Maven 2.0 release.
      </p>
      <p>
        If you are behind a proxy, make sure that you've read
        <a href="configuration.html">Configuring Maven</a> first
        for instructions on how to configure your proxy.
      </p>
      <subsection name="Creating a Project Skeleton">
        <p>
          The first step is to create a Maven 2.0 project to work on. Run the following command:
        </p>
        <source>m2 archetype:create -DgroupId=com.mycompany.app -DartifactId=my-app</source>
        <p>
          This command has created a layout according the the conventions laid out
          <a href="http://maven.apache.org/reference/conventions.html">here</a>.
        </p>
        <!-- TODO
                <p>
                  If you'd like to know more about archetypes, see the <a href="archetypes.html">Archetypes</a> section.
                </p>
        -->
        <p>
          The file
          <code>pom.xml</code> is the Maven 2.0 project descriptor.
        </p>
        <source><![CDATA[
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>]]></source>
        <p>
          You can get a full reference to the
          <a href="maven-model/maven.html">project descriptor</a> to see what other
          elements are available.
        </p>
        <p>
          You'll notice there is a
          <code>src/main/java</code> directory containing a simple source file to compile,
          and a
          <code>src/test/java</code> directory containing a trivial unit test.
        </p>
        <p>
          Let's now change into the project's directory and try a few things...
        </p>
      </subsection>
      <subsection name="Building a Project">
        <p>
          Maven 2.0's primary build is built around a defined lifecycle. There are many stages, but the most used ones
          from the command line are:
        </p>
        <ul>
          <li>
            <code>generate-sources</code> - perform any source generation
          </li>
          <li>
            <code>compile</code> - compile the sources in
            <code>src/main/java</code> as well as any generated source
          </li>
          <li>
            <code>test</code> - compile and run the unit tests
          </li>
          <li>
            <code>package</code> - package the source code into an archive (primarily a JAR)
          </li>
          <li>
            <code>install</code> - install the package in the local repository for use with other projects
          </li>
          <li>
            <code>deploy</code> - deploy the package to the remote repository
          </li>
        </ul>
        <p>
          Note that executing any stage in the lifecycle will execute all of the preceding ones, so you need only run:
        </p>
        <source>m2 install</source>
        <p>
          <b>Note:</b> if you are using the project you generated in the first step, make sure you are running this
          command from inside the directory it created, where <code>pom.xml</code> resides.
        </p>
        <p>
          This will do all of the steps - generating sources, compiling, copying resources, packaging and finally installing.
        </p>
        <p>
          If you try that, you'll see that the file is copied to a directory under <code>~/.m2/repository</code>.
          This is also where all those downloaded files go - it is called your <i>local repository</i>.
          The location is configurable - see <a href="configuration.html">Configuration</a> for more information.
        </p>
        <!-- TODO
                <p>
                  For more information on the lifecycle, see the <a href="lifecycle.html">Build Lifecycle</a>.
                </p>
        -->
        <p>
          You can run other standalone goals as well, for example:
        </p>
        <source>m2 clean:clean install</source>
        <p>
          This will remove the <code>target</code> directory with all the build data before starting so that it is
          fresh.
        </p>
        <p>
          Perhaps you'd like to generate an IntelliJ IDEA descriptor for the project?
        </p>
        <source>m2 idea:idea</source>
        <p>
          This can be run over the top of a previous IDEA project - it will update the settings rather than starting fresh.
        </p>
        <p>
          <b>Note:</b> some familiar goals from Maven 1.0 are still there - such as
          <code>jar:jar</code>, but they might
          not behave like you'd expect. Presently,
          <code>jar:jar</code> will not recompile sources - it will simply just
          create a JAR from the
          <code>target/classes</code> directory, under the assumption everything else had already
          been done.
        </p>
      </subsection>
      <subsection name="Configuring Plugins">
        <p>
          What if you would like to customise whether a plugins is enabled, or how a plugin operates? 
          In Maven 1.0, you would have added some <code>preGoal</code> to <code>maven.xml</code> and some
          entries to <code>project.properties</code>. Here, it is a little different.
        </p>
        <p>
          For this example, we will configure the Java compiler to allow JDK 5.0 sources. This is as simple as
          adding this to your POM:
        </p>
        <source><![CDATA[.
.
<build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-compiler-plugin</artifactId>
      <configuration>
        <source>1.5</source>
        <target>1.5</target>
      </configuration>
    </plugin>
  </plugins>
</build>
.
.]]></source>
        <p>
          You'll notice that all plugins in Maven 2.0 look much like a dependency - and in some ways they are.
          This plugin will be automatically downloaded and used - including a specific version if you request it
          (the default is to use the latest available).
        </p>
        <p>
          The <code>configuration</code> element applies the given parameters to every goal from the compiler plugin.
          It is possible to change a parameter just for an individual goal as well - for example, to change the
          debug flag for test sources:
        </p>
        <source><![CDATA[.
.
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-compiler-plugin</artifactId>
      <goals>
        <goal>
          <id>testCompile</id>
          <configuration>
            <debug>true</debug>
          </configuration>
        </goal>
      </goals>
    </plugin>
.
.]]></source>
        <p>
          To find out what configuration is available for a plugin, you can see the <a href="plugins/">Plugins List</a>
          and navigate to the plugin and goal you are using.
        </p>
      </subsection>
      <subsection name="Other Project Types">
        <p>
          Note that the lifecycle applies to any project type. For example, back in the base direcotry we can create a simple web application:
        </p>
        <source>
m2 archetype:create \
   -DgroupId=com.mycompany.app -DartifactId=my-webapp \
   -DarchetypeArtifactId=maven-archetype-webapp</source>
        <p>
          Note that these must all be on a single line. This will create a directory
          <code>my-webapp</code> and the following
          project descriptor:
        </p>
        <source><![CDATA[<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-webapp</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <finalName>my-webapp</finalName>
  </build>
</project>]]></source>
        <p>
          Note the
          <code>&lt;packaging&gt;</code> element - this tells Maven to build as a WAR. Change into the webapp project's directory and try:
        </p>
        <source>m2 clean:clean package</source>
        <p>
          You'll see
          <code>target/my-webapp.war</code> is built, and that all the normal steps were executed.
        </p>
      </subsection>
      <subsection name="Multiple Modules">
        <p>
          The concept of dealing with multiple modules is built in to Maven 2.0.
          In this section, we will show how to build the WAR above, and include the previous JAR as well in one step.
        </p>
        <p>
          Firstly, we need to add a parent
          <code>pom.xml</code> file in the directory above the other two, so it should look like this:
        </p>
        <source>
+- pom.xml
+- my-app
|  +- pom.xml
+- my-webapp
|  +- pom.xml
        </source>
        <p>
          The POM file you'll create should contain the following:
        </p>
        <source><![CDATA[<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <version>1.0-SNAPSHOT</version>
  <artifactId>app</artifactId>
  <packaging>pom</packaging>
  <modules>
    <module>my-app</module>
    <module>my-webapp</module>
  </modules>
</project>]]></source>
        <p>
          We'll need a dependency on the JAR from the webapp, so add this to
          <code>my-webapp/pom.xml</code>:
        </p>
        <source><![CDATA[
  .
  .
  .
  <dependencies>
    <dependency>
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>
    .
    .
    .]]></source>
        <p>
          Finally, add the following
          <code>&lt;parent&gt;</code> element to both of the other
          <code>pom.xml</code> files
          in the subdirectories:
        </p>
        <source><![CDATA[<project>
  <parent>
    <groupId>com.mycompany.app</groupId>
    <artifactId>app</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  .
  .
  .]]></source>
        <p>
          Now, try it... from the top level directory, run:
        </p>
        <source>m2 clean:clean install</source>
        <p>
          <b>Note: </b> If you didn't remove the
          <code>warName</code> plugin configuration, this will have
          failed due to a bug. Please remove that section, and try again.
        </p>
        <p>
          The WAR has now been created in
          <code>my-webapp/target/my-webapp.war</code>, and the JAR is
          included:
        </p>
        <source>$ jar tvf my-webapp/target/my-webapp-1.0-SNAPSHOT.war
     0 Fri Jun 24 10:59:56 EST 2005 META-INF/
   222 Fri Jun 24 10:59:54 EST 2005 META-INF/MANIFEST.MF
     0 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/
     0 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/com.mycompany.app/
     0 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/com.mycompany.app/my-webapp/
  3239 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/com.mycompany.app/my-webapp/pom.xml
     0 Fri Jun 24 10:59:56 EST 2005 WEB-INF/
   215 Fri Jun 24 10:59:56 EST 2005 WEB-INF/web.xml
   123 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/com.mycompany.app/my-webapp/pom.properties
    52 Fri Jun 24 10:59:56 EST 2005 index.jsp
     0 Fri Jun 24 10:59:56 EST 2005 WEB-INF/lib/
  2713 Fri Jun 24 10:59:56 EST 2005 WEB-INF/lib/my-app-1.0-SNAPSHOT.jar</source>
        <p>
          How does this work? Firstly, the parent POM created (called
          <code>app</code>), has a packaging of
          <code>pom</code>
          and a list of modules defined. This tells Maven to run all operations over the set of projects instead of
          just the current one (to override this behaviour, you can use the
          <code>--non-recursive</code> command line
          option).
        </p>
        <p>
          Next, we tell the WAR that it requires the
          <code>my-app</code> JAR. This does a few things: it makes it available
          on the classpath to any code in the WAR (none in this case), it makes sure the JAR is always built before the
          WAR, and it indicates to the WAR plugin to include the JAR in it's library directory.
        </p>
        <p>
          You may have noticed that
          <code>junit-3.8.1.jar</code> was a dependency, but didn't end up in the WAR. The
          reason for this is the
          <code>&lt;scope&gt;test&lt;/scope&gt;</code> element - it is only required for testing,
          and so is not included in the web application as the compile time dependency
          <code>my-app</code> is.
        </p>
        <p>
          The final step was to include a parent definition. This is different to the
          <code>extend</code> element you
          may be familiar with from Maven 1.0: this ensures that the POM can always be located even if the project
          is distributed separately from its parent by looking it up in the repository.
        </p>
        <p>
          Like Maven 1.0, as of the current Maven release (
          <code>2.0-alpha-3</code>), it is required that you run
          <code>install</code> to successfully perform these steps. If you run
          <code>package</code>, the JAR will not be
          copied to the local repository and Maven will not be able to find it. This will be improved in future versions.
        </p>
        <p>
          You might like to generate you IDEA workspace again from the top level directory...
        </p>
        <source>m2 idea:idea</source>
      </subsection>
      <subsection name="Other Topics">
        <p>
          That's all there is to this brief tutorial. This is by no means the limits of the capabilities of Maven 2.0,
          but covers some of the basics and the new features.
        </p>
        <p>
          If you'd like to know more about general Maven concepts, in association with how the current stable release,
          Maven 1.0, works, see the
          <a href="http://maven.apache.org">Maven website</a>.
        </p>
        <p>
          For more information on Maven 2.0, you can consult the
          <a href="plugins/index.html">list of available plugins</a>,
          or the other documentation on this site.
        </p>
      </subsection>
    </section>
  </body>
</document>

