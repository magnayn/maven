 ----
 Maven Getting Started Guide
 -----
 Jason van Zyl
 -----
 12 October 2005
 -----     

Maven Getting Started Guide

 This guide is intended as a reference for those working with Maven for the first time,  but is also intended to serve as
 a cookbook with self-contained references and solutions for common usecases. For first time users, it is recommended
 that you step through the material in a sequential fashion. For users more familiar with Maven, this guide endeavours
 to provide a quick solution for the need at hand. It is assumed at this point that you have downloaded Maven and
 installed Maven on your local machine. If you have not done so please refer to the
 {{{../../download.html}Download and Installation}} instructions.

 Ok, so you now have Maven installed and we're ready to go. Before we jump into our examples we'll very briefly go over
 what Maven is and how it can help you with your daily work and collaborative efforts with team members. Maven will, of
 course, work for small projects, but Maven shines in helping teams operate more effectively by allowing team members
 to focus on what the stakeholders of a project require. You can leave the build infrastructure to Maven!

Sections

 * {{{index.html#What is Maven?}What is Maven?}}

 * {{{index.html#How can Maven benefit my development process?}How can Maven benefit my development process?}}

 * {{{index.html#How do I make my first Maven project?}How do I make my first Maven project?}}

 * {{{index.html#How do I compile my application sources?}How do I compile my application sources?}}

 * {{{index.html#How do I compile my test sources and run my unit tests?}How do I compile my test sources and run my unit tests?}}

 * {{{index.html#How do I create a JAR and install it in my local repository?}How do I create a JAR and install it in my local repository?}}

 * {{{index.html#How do add resources to my JAR?}How do add resources to my JAR?}}

 * {{{index.html#How do I filter resource files?}How do I filter resource files?}}

 * {{{index.html#How do I use external dependencies?}How do I use external dependencies?}}

 * {{{index.html#How do I deploy my jar in my remote repository?}How do I deploy my jar in my remote repository?}}

 * {{{index.html#How do I create documentation?}How do I create documentation?}}

 * {{{index.html#How do I deploy my site?}How do I deploy my site?}}

 * {{{index.html#How do I use plug-ins?}How do I use plug-ins?}}

 * {{{index.html#How do I control what version of a plug-in I use?}How do I control what version of a plug-in I use?}}

 * {{{index.html#How do I build more than one project at once?}How do I build more than one project at once?}}

 []

* {What is Maven?}

 At first glance Maven can appear to be many things, but in a nutshell Maven is an attempt <to apply patterns to
 a project's build infrastructure in order to promote comprehension and productivity by providing a clear path in the
 use of best practices>. Maven is essentially a project management and comprehension tool and as such provides a way to
 help with managing:


 * Builds

 * Documentation

 * Reporting

 * Dependencies

 * SCMs

 * Releases

 * Distribution

 []

 If you want more background information on Maven you can check out {{{../../background/philosophy-of-maven.html}The Philosophy of Maven}} and
 {{{../../background/history-of-maven.html}The History of Maven}}. Now let's move on to how you, the user, can benefit from
 using Maven.

* {How can Maven benefit my development process?}

 Maven can provide benefits for your build process by employing standard conventions and practices to accelerate your development
 cycle while at the same time helping you achieve a higher rate of success. For a more detailed look at how
 Maven can help you with your development process please refer to {{{../../benefits-of-using-maven.html}The Benefits of Using Maven}}.

 Now that we have covered a little bit of the history and purpose of Maven let's get into some real examples to
 get you up and running with Maven!

* {How do I make my first Maven project?}

 We are going to jump headlong into creating your first Maven project!
 To create our first Maven project we are going to use Maven's archetype mechanism. An archetype is defined as
 <an original pattern or model from which all other things of the same kind are made>. In Maven, an archetype is a template
 of a project which is combined with some user input to produce a working Maven project that has been tailored to the
 user's requirements. We are going to show you how the archetype mechanism works now, but if you would to know more about
 archetypes please refer to our {{{introduction-to-archetypes.html}Introduction to Archetypes}}.

 On to creating your first project! In order to create the simplest of Maven projects, execute the following from
 the command line:

+-----+

m2 archetype:create -DgroupId=com.mycompany.app -DartifactId=my-app

+-----+

 Once you have executed this command, you will notice a few things have happened. First, you will notice that
 a directory names <<<my-app>>> has been created for the new project, and this directory contains a file named
 <<<pom.xml>>> that should look like this:

+-----+

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Maven Quick Start Archetype</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>

+-----+

 <<<pom.xml>>> contains the Project Object Model (POM) for this project. The POM is the basic unit
 of work in Maven. This is important to remember because Maven is inherently project-centric in that everything revolves
 around the notion of a project. In short, the POM contains every important piece of information about your project and
 is essentially one-stop-shopping for finding anything related to your project. Understanding the POM is important and
 new users are encouraged to refer to the {{{introduction-to-the-pom.html}Introduction to the POM}}.

  This is a very simple POM but still displays the key elements every POM contains, so let's walk through each of them
  to familiarize you with the POM essentials:

  * <<project>> This is the top-level element in all Maven pom.xml files.

  * <<modelVersion>> This element indicates what version of the object model this POM is using. The version of the
    model itself changes very infrequently but it is mandatory in order to ensure stability of use if and when
    the Maven developers deem it necessary to change the model.

  * <<groupId>> This element indicates the unique identifier of the organization or group that created the project.
    The groupId is one of the key identifiers of a project and is typically based on the fully qualified
    domain name of your organization. For example  <<<org.apache.maven.plugins>>> is the designated groupId for
    all Maven plug-ins.

  * <<artifactId>> This element indicates the unique base name of the primary artifact being generated by this project.
    The primary artifact for a project is typically a JAR file. Secondary artifacts like source bundles also use
    the artifactId as part of their final name. A typical artifact produced by would have the form
    \<artifactId\>-\<version\>.\<extension\> (for example, <<<myapp-1.0.jar>>>).

  * <<packaging>> This element indicates the package type to be used by this artifact (e.g. JAR, WAR, EAR, etc.).
    This not only means if the artifact
    produced is JAR, WAR, or EAR but can also indicate a specific lifecycle to use as part of the build process. (The
    lifecycle is a topic we will deal with further on in the guide. For now, just keep in mind that the indicated packaging of a project
    can play a part in customizing the build lifecycle.) The default value for the <<<packaging>>> element is JAR
    so you do not have to specify this for most projects.

  * <<version>> This element indicates the version of the artifact generated by the project. Maven goes a long way
    to help you with version management and you will often see the <<<SNAPSHOT>>> designator in a version, which
    indicates that a project is in a state of development. We will discuss the use of snapshots and how they work further
    on in this guide.

  * <<name>> This element indicates the display name used for the project. This is often used in Maven's
    generated documentation.

  * <<url>> This element indicates where the project's site can be found. This is often used in Maven's
    generated documentation.

  * <<description>> This elements provides a basic description of your project. This is often used in
    Maven's generated documentation.

  []

 For a complete reference of what elements are available for use in the POM please refer to our {{{../../maven-model/maven.html}POM Reference}}.
 Now let's get back to the project at hand.

 After the archetype generation of your first project you will also notice that the following directory structure
 has been created:

+-----+

my-app
|-- pom.xml
`-- src
    |-- main
    |   `-- java
    |       `-- com
    |           `-- mycompany
    |               `-- app
    |                   `-- App.java
    `-- test
        `-- java
            `-- com
                `-- mycompany
                    `-- app
                        `-- AppTest.java

+-----+

 As you can see, the project created from the archetype has a POM, a source tree for your application's sources and
 a source tree for your test sources. This is the standard layout for Maven projects (the application sources
 reside in <<<$\{basedir\}/src/main/java>>> and test sources reside in <<<$\{basedir\}/src/test/java>>>, where $\{basedir\}
 represents the directory containing <<<pom.xml>>>).

 If you were to create a Maven project by hand this is the directory structure that we recommend using. This is a
 Maven convention and to learn more about it you can read our
 {{{introduction-to-the-standard-directory-layout.html}Introduction to the Standard Directory Layout}}.

 Now that we have a POM, some application sources, and some test sources you are probably asking ...

* {How do I compile my application sources?}

 Execute the following command to compile your application sources:

+-----+

m2 compile

+-----+

 Upon executing this command you should see output like the following:

+-----+

[INFO] ----------------------------------------------------------------------------
[INFO] Building Maven Quick Start Archetype
[INFO]    task-segment: [compile]
[INFO] ----------------------------------------------------------------------------
[INFO] artifact org.apache.maven.plugins:maven-resources-plugin: checking for updates from central
...
[INFO] artifact org.apache.maven.plugins:maven-compiler-plugin: checking for updates from central
...
[INFO] [resources:resources]
...
[INFO] [compiler:compile]
Compiling 1 source file to <dir>/my-app/target/classes
[INFO] ----------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ----------------------------------------------------------------------------
[INFO] Total time: 3 minutes 54 seconds
[INFO] Finished at: Fri Sep 23 15:48:34 GMT-05:00 2005
[INFO] Final Memory: 2M/6M
[INFO] ----------------------------------------------------------------------------

+-----+

 The first time you execute this (or any other) command, Maven will need to download all the plugins and related
 dependencies it needs to fulfill the command.  From a clean installation of Maven this can take quite a while (in
 the output above, it took almost 4 minutes).  If you execute the command again, Maven will now have what it needs,
 so it won't need to download anything new and will be able to execute the command much quicker.

 As you can see from the output, the compiled classes were placed in <<<$\{basedir\}/target/classes>>>, which is
 another standard convention employed by Maven. So, if you're a keen observer you'll notice that using the
 standard conventions the POM above is very small and you haven't explicity had to tell Maven where any of
 your sources are or where the output should go. By following the standard Maven conventions you can get
 a lot done with very little effort! Just as a casual comparison, let's take a look at what you might have had to do
 in {{{http://ant.apache.org}Ant}} to accomplish the same {{{../../ant/build-a1.xml}thing}}.

 Now, this is simply to compile a single tree of application sources and the Ant script shown is pretty much the same
 size as the POM shown above. But we'll see how much more we can do with just that simple POM!

* {How do I compile my test sources and run my unit tests?}

 Now you're successfully compiling your application's sources and now you've got some unit tests that you want to compile
 and execute (because every programmer always writes and executes their unit tests *nudge nudge wink wink*).

 Execute the following command:

+----+

m2 test

+----+

 Upon executing this command you should see output like the following:

+----+

[INFO] ----------------------------------------------------------------------------
[INFO] Building Maven Quick Start Archetype
[INFO]    task-segment: [test]
[INFO] ----------------------------------------------------------------------------
[INFO] artifact org.apache.maven.plugins:maven-surefire-plugin: checking for updates from central
...
[INFO] [resources:resources]
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] [compiler:testCompile]
Compiling 1 source file to C:\Test\Maven2\test\my-app\target\test-classes
...
[INFO] [surefire:test]
[INFO] Setting reports dir: C:\Test\Maven2\test\my-app\target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
[surefire] Running com.mycompany.app.AppTest
[surefire] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0 sec

Results :
[surefire] Tests run: 1, Failures: 0, Errors: 0

[INFO] ----------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ----------------------------------------------------------------------------
[INFO] Total time: 15 seconds
[INFO] Finished at: Thu Oct 06 08:12:17 MDT 2005
[INFO] Final Memory: 2M/8M
[INFO] ----------------------------------------------------------------------------
+----+

 Some things to notice about the output:

    * Maven downloads more dependencies this time. These are the dependencies and plugins necessary for executing the tests
      (it already has the dependencies it needs for compiling and won't download them again).

    * Before compiling and executing the tests Maven compiles the main code (all these classes are up to date because
      we haven't changed anything since we compiled last).

 If you simply want to compile your test sources (but not execute the tests), you can execute the following:

+----+

 m2 test-compile

+----+

 Now that you can compile your application sources, compile your tests, and execute the tests, you'll want to move
 on to the next logical step so you'll be asking ...

* {How do I create a JAR and install it in my local repository?}

 Making a JAR file is straight forward enough and can be accomplished by executing the following command:

~~ How to skip tests ... jvz

+----+

m2 package

+----+

 If you take a look at the POM for your project you will notice the <<<packaging>>> element is set to <<<jar>>>.
 This is how Maven knows to produce a JAR file from the above command (we'll talk more about this later).
 You can now take a look in the the <<<$\{basedir\}/target>>> directory and you will see the generated JAR file.

 Now you'll want to install the artifact you've generated (the JAR file) in your local repository
 (<<<~/.m2/repository>>> is the default location). For more information on repositories you can refer to our
 {{{introduction-to-repositories.html}Introduction to Repositories}} but let's move on to installing our artifact!
 To do so execute the following command:

+----+

m2 install

+----+

 Upon executing this command you should see the following output:

+----+

[INFO] ----------------------------------------------------------------------------
[INFO] Building Maven Quick Start Archetype
[INFO]    task-segment: [install]
[INFO] ----------------------------------------------------------------------------
[INFO] [resources:resources]
[INFO] [compiler:compile]
Compiling 1 source file to <dir>/my-app/target/classes
[INFO] [resources:testResources]
[INFO] [compiler:testCompile]
Compiling 1 source file to <dir>/my-app/target/test-classes
[INFO] [surefire:test]
[INFO] Setting reports dir: <dir>/my-app/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
[surefire] Running com.mycompany.app.AppTest
[surefire] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.001 sec

Results :
[surefire] Tests run: 1, Failures: 0, Errors: 0

[INFO] [jar:jar]
[INFO] Building jar: <dir>/my-app/target/my-app-1.0-SNAPSHOT.jar
[INFO] [install:install]
[INFO] Installing <dir>/my-app/target/my-app-1.0-SNAPSHOT.jar to <local-repository>/com/mycompany/app/my-app/1.0-SNAPSHOT/my-app-1.0-SNAPSHOT.jar
[INFO] ----------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ----------------------------------------------------------------------------
[INFO] Total time: 5 seconds
[INFO] Finished at: Tue Oct 04 13:20:32 GMT-05:00 2005
[INFO] Final Memory: 3M/8M
[INFO] ----------------------------------------------------------------------------

+----+

 Note that the surefire plugin (which executes the test) looks for tests contained in files with a particular naming convention. By default
 the tests included are:

 * <<<\*\*/\*Test.java>>>

 * <<<\*\*/Test\*.java>>>

 * <<<\*\*/\*TestCase.java>>>

 []

 And the default excludes are:

 * <<<\*\*/Abstract\*Test.java>>>

 * <<<\*\*/Abstract\*TestCase.java>>>

 []

 You have walked through the process for setting up, building, testing, packaging, and installing a typical Maven project.
 This is likely the vast majority of what projects will be doing with Maven and if you'ved noticed, everything you've been
 able to do up to this point has been driven by an 18-line file, namely the project's model or POM. If you look at
 a typical Ant {{{../../ant/build-a1.xml}build file}} that provides the same functionality that we've achieved thus
 far you'll notice it's already twice the size of the POM and we're just getting started! There is far more
 functionality available to you from Maven without requiring any additions to our POM as it currently stands. To
 get any more functionality out of our example Ant build file you must keep making error-prone additions.

 So what else can you get for free? There are a great number of Maven plug-ins that work out of the box with
 even a simple POM like we have above. We'll mention one here specifically as it is one of the highly
 prized features of Maven: without any work on your part this POM has enough information to generate
 a web site for your project! You will most likely want to customize your Maven site but if you're pressed for
 time all you need to do to provide basic information about your project is execute the following command:

+----+

m2 site

+----+

* {How do add resources to my JAR?}

 Another common usecase that can be satisfied which requires no changes to the POM that we have
 above is packaging resources in the JAR file. For this common task, Maven again relies on the
 {{{introduction-to-the-standard-directory-layout.html}Standard Directory Layout}}, which means by using
 standard Maven coventions you can package resources within JARs simply by placing those resources in a standard
 directory structure.

 You see below in our example we have added the directory <<<$\{basedir\}/src/main/resources>>> into which we place
 any resources we wish to package in our JAR. The simple rule employed by Maven is this: any directories or files
 placed within the <<<$\{basedir\}/src/main/resources>>> directory are packaged in your JAR with the exact same
 structure starting at the base of the JAR.

+----+

my-app
|-- pom.xml
`-- src
    |-- main
    |   |-- java
    |   |   `-- com
    |   |       `-- mycompany
    |   |           `-- app
    |   |               `-- App.java
    |   `-- resources
    |       `-- META-INF
    |           `-- application.properties
    `-- test
        `-- java
            `-- com
                `-- mycompany
                    `-- app
                        `-- AppTest.java
+----+

 So you can see in our example that we have a <<<META-INF>>> directory with an <<<application.properties>>> file
 within that directory. If you unpacked the JAR that Maven created for you and took a look at it you would
 see the following:

+----+

|-- META-INF
|   |-- MANIFEST.MF
|   |-- application.properties
|   `-- maven
|       `-- com.mycompany.app
|           `-- my-app
|               |-- pom.properties
|               `-- pom.xml
`-- com
    `-- mycompany
        `-- app
            `-- App.class

+----+

 As you can see, the contents of <<<$\{basedir\}/src/main/resources>>> can be found starting at the base of the
 JAR and our <<<application.properties>>> file is there in the <<<META-INF>>> directory. You will also notice some other files there
 like <<<META-INF/MANIFEST.MF>>> as well as a <<<pom.xml>>> and <<<pom.properties>>> file. These come standard with
 generation of a JAR in Maven. You can create your own manifest if you choose, but Maven will generate one by
 default if you don't. (You can also modify the entries in the default manifest. We will touch on this
 later.) The <<<pom.xml>>> and <<<pom.properties>>> files are packaged up in the JAR so that each artifact
 produced by Maven is self-describing and also allows you to utilize the metadata in your own application
 if the need arises. One simple use might be to retrieve the version of your application. Operating on the POM
 file would require you to use some Maven utilities but the properties can be utilized using the standard
 Java API and look like the following:

+----+

#Generated by Maven
#Tue Oct 04 15:43:21 GMT-05:00 2005
version=1.0-SNAPSHOT
groupId=com.mycompany.app
artifactId=my-app

+----+

 To add resources to the classpath for your unit tests, you follow the same pattern as you do for adding resources to the JAR
 except the directory you place resources in is $\{basedir\}/src/test/resources. At this point you would have a
 project directory structure that would look like the following:

+---+

my-app
|-- pom.xml
`-- src
    |-- main
    |   |-- java
    |   |   `-- com
    |   |       `-- mycompany
    |   |           `-- app
    |   |               `-- App.java
    |   `-- resources
    |       `-- META-INF
    |           |-- application.properties
    |           `-- application.properties~
    `-- test
        |-- java
        |   `-- com
        |       `-- mycompany
        |           `-- app
        |               `-- AppTest.java
        `-- resources
            `-- test.properties
+---+

 In a unit test you could use a simple snippet of code like the following to access the resource required for
 testing:

+----+

...

// Retrieve resource
InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream( "test.properties" );

// Do something with the resource

...

+----+

* {How do I filter resource files?}

 Sometimes a resource file will need to contain a value that can only be supplied at build time.  To accomplish this in
 Maven, put a reference to the property that will contain the value into your resource file using the syntax <<<$\{<property name}>\}>>>.
 The property can be one of the values defined in your pom.xml, a value defined in the user's settings.xml, a property
 defined in an external properties file, or a system property.

 To have Maven filter resources when copying, simply set <<<filtering>>> to true for the resource directory in your pom.xml:

+----+

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Maven Quick Start Archetype</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
  </build>
</project>

+----+

 You'll notice that we had to add the <<<build>>>, <<<resources>>>, and <<<resource>>> elements which weren't there before.
 In addition, we had to explicitly state that the resources are located in the src/main/resources directory.  All of this
 information was provided as default values previously, but because the default value for <<<filtering>>> is false, we had
 to add this to our pom.xml in order to override that default value and set <<<filtering>>> to true.

 To reference a property defined in your pom.xml, the property name uses the names of the XML elements that define the value,
 with "pom" being allowed as an alias for the project (root) element.  So $\{pom.name\} refers to the name of the project,
 $\{pom.version\} refers to the version of the project, $\{pom.build.finalName\} refers to the final name of the file created
 when the built project is packaged, etc.  Note that some elements of the POM have default values, so don't need to be explicitly
 defined in your pom.xml for the values to be available here.  Similarly, values in the user's settings.xml can be referenced
 using property names beginning with "settings" (for example, $\{settings.localRepository\} refers to the path of the user's
 local repository).

 To continue our example, let's add a couple of properties to the application.properties file (which we put in the
 src/main/resources directory) whose values will be supplied when the resource is filtered:

+----+

# application.properties
application.name=${pom.name}
application.version=${pom.version}

+----+

 With that in place, you can execute the following command (process-resources is the build lifecycle phase where the resources are
 copied and filtered):

+----+

m2 process-resources

+----+

 and the application.properties file under target/classes (and will eventually go into the jar) looks like this:

+----+

# application.properties
application.name=Maven Quick Start Archetype
application.version=1.0-SNAPSHOT

+----+

 To reference a property defined in an external file, all you need to do is add a reference to this external file in your pom.xml.
 First, let's create our external properties file and call it src/main/filters/filter.properties:

+----+

# filter.properties
my.filter.value=hello!

+----+

 Next, we'll add a reference to this new file in the pom.xml:

+----+

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Maven Quick Start Archetype</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <filters>
      <filter>src/main/filters/filter.properties</filter>
    </filters>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
  </build>
</project>

+----+

 Then, if we add a reference to this property in the application.properties file:

+----+

# application.properties
application.name=${pom.name}
application.version=${pom.version}
message=${my.filter.value}

+----+

 the next execution of the <<<m2 process-resources>>> command will put our new property value into application.properties.
 As an alternative to defining the my.filter.value property in an external file, you could also have defined it in the <<<properties>>>
 section of your pom.xml and you'd get the same effect (notice I don't need the references to src/main/filters/filter.properties either):

+----+

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Maven Quick Start Archetype</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
  </build>
  <properties>
    <my.filter.value>hello</my.filter.value>
  </properties>
</project>

+----+

 Filtering resources can also get values from system properties; either the system properties built into Java (like java.version or
 user.home) or properties defined on the command line using the standard Java -D parameter.  To continue the example, let's change
 our application.properties file to look like this:

+----+

# application.properties
java.version=${java.version}
command.line.prop=${command.line.prop}

+----+

 Now, when you execute the following command (note the definition of the command.line.prop property on the command line), the
 application.properties file will contain the values from the system properties.

+----+

m2 process-resources "-Dcommand.line.prop=hello again"

+----+


* {How do I use external dependencies?}

 You've probably already noticed a <<<dependencies>>> element in the POM we've been using as an example.
 You have, in fact, been using an external dependency all this time, but here we'll talk about how this
 works in a bit more detail. For a more thorough introduction, please refer to our
 {{{introduction-to-dependency-management.html}Introduction to Dependency Management}}.

 The <<<dependencies>>> section of the pom.xml lists all of the external dependencies that particular needs
 in order to build (whether it needs that dependency at compile time, test time, run time, or whatever).  Right
 now, our project is depending on JUnit only (I took out all of the resource filtering stuff for clarity):

+----+

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Maven Quick Start Archetype</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>

+----+

 For each external dependency, you'll need to define at least 4 things: groupId, artifactId, version, and scope.  The groupId,
 artifactId, and version are the same as those given in the pom.xml for the project that built that dependency.  The scope
 element indicates how your project uses that dependency, and can be values like <<<compile>>>, <<<test>>>, and <<<runtime>>>.
 For more information on everything you can specify for a dependency, see the {{{../../../maven-model/maven.html}Project Descriptor Reference}}.
 ~~DJ: Does this link work? I can't find the document.
 For more information about the dependency mechanism as a whole, see {{{../../dependency-mechanism.html}Dependency Mechanism}}.

 With this information about a dependency, Maven will be able to reference the dependency when it builds the project.  Where does
 Maven reference the dependency from?  Maven looks in your local repository (<<<~/.m2/repository>>> is the default location) to find
 all dependencies.  In a {{{How do I create a JAR and install it in my local repository?}previous section}}, we installed the artifact
 from our project (my-app-1.0-SNAPSHOT.jar) into the local repository.  Once it's installed there, another project can reference that jar
 as a dependency simply by adding the dependency information to its pom.xml:

+----+

<project>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-other-app</artifactId>
  ...
  <dependencies>
    ...
    <dependency>
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1.0-SNAPSHOT</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>
</project>

+----+

 What about dependencies built somewhere else?  How do they get into my local repository?  Whenever a project references a dependency
 that isn't available in the local repository, Maven will download the dependency from a remote repository into the local repository.  You
 probably noticed Maven downloading a lot of things when you built your very first project (these downloads were dependencies for the
 various plugins used to build the project).  By default, the remote repository Maven uses can be found (and browsed) at
 {{http://www.ibiblio.org/Maven2}}.  You can also set up your own remote repository (maybe a central repository for your company) to
 use instead of or in addition to ibiblio.  For more information on repositories you can refer to the
 {{{introduction-to-repositories.html}Introduction to Repositories}}.

 Let's add another dependency to our project.  Let's say we've added some logging to the code and need to add log4j as a dependency.
 First, we need to know what the groupId, artifactId, and version are for log4j.  We can browse ibiblio and look for it, or use Google
 to help by searching for "site:www.ibiblio.org maven2 log4j".  The search shows a directory called /maven2/log4j/log4j (or
 /pub/packages/maven2/log4j/log4j).  In that directory is a file called maven-metadata.xml.  Here's what the maven-metadata.xml for
 log4j looks like:

+----+

<metadata>
  <groupId>log4j</groupId>
  <artifactId>log4j</artifactId>
  <version>1.1.3</version>
  <versioning>
    <versions>
      <version>1.1.3</version>
      <version>1.2.4</version>
      <version>1.2.5</version>
      <version>1.2.6</version>
      <version>1.2.7</version>
      <version>1.2.8</version>
      <version>1.2.11</version>
      <version>1.2.9</version>
      <version>1.2.12</version>
    </versions>
  </versioning>
</metadata>

+----+

 From this file, we can see that the groupId we want is "log4j" and the artifactId is "log4j".  We see lots of different version values
 to choose from; for now, we'll just use the latest version, 1.2.12 (some maven-metadata.xml files may also specify which version is
 the current release version).  Alongside the maven-metadata.xml file, we can see a directory corresponding to each version of the
 log4j library.  Inside each of these, we'll find the actual jar file (e.g. log4j-1.2.12.jar) as well as a pom file (this is the pom.xml
 for the dependency, indicating any further dependencies it might have and other information) and another maven-metadata.xml file.
 There's also an md5 file corresponding to each of these, which contains an MD5 hash for these files.  You can use this to authenticate
 the library or to figure out which version of a particular library you may be using already.

 Now that we know the information we need, we can add the dependency to our pom.xml:

+----+

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Maven Quick Start Archetype</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.12</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>
</project>

+----+

 Now, when we compile the project (<<<m2 compile>>>), we'll see Maven download the log4j dependency for us.

~~DJ: Current

* {How do I deploy my jar in my remote repository?}

+----+

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Maven Quick Start Archetype</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <version>1.0.4</version>
    </dependency>
  </dependencies>
  <build>
    <filters>
      <filter>src/main/filters/filters.properties</filter>
    </filters>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
  </build>
  <!--
   |
   |
   |
   -->
  <distributionManagement>
    <repository>
      <id>mycompany-repository</id>
      <name>MyCompany Repository</name>
      <url>scp://repository.mycompany.com/repository/maven2</url>
    </repository>
  </distributionManagement>
</project>

+----+

+----+

<settings>
  .
  .
  <servers>
    <server>
      <id>mycompany-repository</id>
      <username>jvanzyl</username>
      <!-- Default value is ~/.ssh/id_dsa -->
      <privateKey>/path/to/identity</privateKey> (default is ~/.ssh/id_dsa)
      <passphrase>my_key_passphrase</passphrase>
    </server>
  </servers>
  .
  .
</settings>

+----+

* {How do I create documentation?}

 To get you jump started with Maven's documentation system you can use the archetype mechanism to generate a site
 for you without your existing project using the following command:

+----+

m2 archetype:create -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-site

+----+

 If you take a look in your directory structure it should look like the following:

+----+

my-app
|-- pom.xml
`-- src
    |-- main
    |   |-- filters
    |   |   `-- filters.properties
    |   |-- java
    |   |   `-- com
    |   |       `-- mycompany
    |   |           `-- app
    |   |               `-- App.java
    |   `-- resources
    |       `-- META-INF
    |           |-- application.properties
    |           `-- application.properties~
    |-- site
    |   |-- apt
    |   |   |-- format.apt
    |   |   `-- index.apt
    |   |-- fml
    |   |   `-- faq.fml
    |   |-- fr
    |   |   |-- apt
    |   |   |   |-- format.apt
    |   |   |   `-- index.apt
    |   |   |-- fml
    |   |   |   `-- faq.fml
    |   |   `-- xdoc
    |   |       `-- xdoc.xml
    |   |-- site.xml
    |   |-- site_fr.xml
    |   `-- xdoc
    |       `-- xdoc.xml
    `-- test
        |-- java
        |   `-- com
        |       `-- mycompany
        |           `-- app
        |               `-- AppTest.java
        `-- resources
            `-- test.properties
+----+

 You will notice there is now a <<<${basedir}/src/site>>> directory within which is contained a site descriptor
 along with various directories corresponding to the supported document types. Let's take a look at site
 descriptor and the examples of the various document types.

 The Xdoc format is the same as {{{http://maven.apache.org/using/site.html} used in Maven 1.0}}. However, <<<navigation.xml>>>
 has been replaced by the site descriptor (see below).

 The APT format, "Almost Plain Text", is a wiki-like format that allows you to write simple, structured documents (like this)
 very quickly. A full reference of the {{{apt-format.html} APT Format}} is available.

 The FML format is the FAQ format, also used in Maven 1.0.

 Other formats are available, but at this point these 3 are the best tested. There are also several possible output formats,
 but as of 2.0, only XHTML is available.

 Note that all of the above is optional - just one index file is required in one of the input trees. Each of the paths will be merged
 together to form the root directory of the site.

* Generating The Site

 Generating the site is very simple, and fast!

---------------
m2 site
---------------

 The resulting site will be in <<<target/site/...>>>

* {How do I deploy my site?}

  To be able to deploy the site, you must first declare a location to distribute to in your <<<pom.xml>>>, similar to the repository for
  deployment.

---------------
<distributionManagement>
  <site>
    <id>website</id>
    <url>scp://www.mycompany.com/www/docs/project/</url>
  </site>
</distributionManagement>
---------------

  The <<<id>>> element identifies the repository, so that you can attach credentials to it in your <<<settings.xml>>>
  file in the same way as you would for any other repository. The URL gives the location to deploy to. Currently,
  only SSH is supported, as above which copies to the host <<<www.mycompany.com>>> in the path <<</www/docs/project/>>>.

  Deploying the site is done with the <<<site-deploy>>> goal. Note that you cannot just call the deployment goal on its own, however.
  You must presently run the <<<site:site>>> goal independantly.

---------------
m2 site-deploy
---------------

  <<Note:>> the trailing slash in the URL above indicates that any subprojects that inherit this value should append their artifact ID to
  the path instead of using it as is.

* Creating a Site Descriptor

  The <<<site.xml>>> file is used to describe the layout of the site, and replaces the navigation file used in Maven 1.0.

  A sample is given below:

--------------------
<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="Maven">
  <bannerLeft>
    <name>Maven</name>
    <src>http://maven.apache.org/images/apache-maven-project.png</src>
    <href>http://maven.apache.org/</href>
  </bannerLeft>
  <bannerRight>
    <src>http://maven.apache.org/images/maven-small.gif</src>
  </bannerRight>
  <body>
    <links>
      <item name="Apache" href="http://www.apache.org/" />
      <item name="Maven 1.0" href="http://maven.apache.org/"/>
      <item name="Maven 2" href="http://maven.apache.org/maven2/"/>
    </links>

    <menu name="Maven 2.0">
      <item name="Introduction" href="index.html"/>
      <item name="Download" href="download.html"/>
      <item name="Release Notes" href="release-notes.html" />
      <item name="General Information" href="about.html"/>
      <item name="For Maven 1.0 Users" href="maven1.html"/>
      <item name="Road Map" href="roadmap.html" />
    </menu>

    ${reports}

    ...
  </body>
</project>
--------------------

  ~~TODO: deserves more explanation.

  Note the <<<${reports}>>> string in the navigation. When building the site, this is replaced by menus for any reports
  that you have configured.

* Adding Extra Resources

  You can add any arbitrary resources to you site by including them in a
  <<<resources>>> directory as shown below. Addition CSS will be picked up
  when they are placed in the <<<css>>> directory within the <<<resources>>>
  directory.

-------------------
+- src/
   +- site/
      +- resources/
         +- css/
         |  +- site.css
         |
         +- images/
            +- pic1.jpg
--------------------

  The file <<<site.css>>> will be added to the default XHTML output, so can be used to adjust the default Maven stylesheets if desired.

  The file <<<pic1.jpg>>> will be available via a relative reference to the <<<images>>> directory from any page in your site.

* Configuring Reports

  Maven has several reports that you can add to your web site to display the current state of the project.
  These reports take the form of plugins, just like those used to build the project.

  To add these reports to your site, you must add the plugins to a special <<<reporting>>> section in the POM. The
  following example shows how to configure the standard project information reports that display information from the
  POM in a friendly format:

-------------------
<project>
  ...
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
      </plugin>
    </plugins>
  </reporting>
  ...
-------------------

  If you have included the appropriate <<<${reports}>>> tag in your <<<site.xml>>> descriptor, then when you regenerate
  the site those items will appear on the menu.

  ~~TODO: explain report sets

* Internationalisation

  Internationalisation in Maven is very simple, as long as the reports you are using have that particular locale
  defined.

  To enable multiple locales, add configuration similar to the following to your POM:

-------------------
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <configuration>
          <locales>en,fr</locales>
        </configuration>
      </plugin>
    </plugins>
  ...
-------------------

  This will generate both an English and a French version of the site. If <<<en>>> is your current locale, then it will
  be generated at the root of the site, with a copy of the French translation of the site in the <<<fr/>>> subdirectory.

  To add your own content for that translation instead of using the default, place a subdirectory with that locale
  name in your site directory and create a new site descriptor with the locale in the file name. For example:

-------------------
+- src/
   +- site/
      +- apt/
      |  +- index.apt     (Default version)
      +- fr/
      |  +- apt/
      |  |  +- index.apt  (French version)
      +- site.xml         (Default site descriptor)
      +- site_fr.xml      (French site descriptor)
--------------------

  With one site descriptor by language, translated site can evolve independently.

* {How do I use plug-ins?}

* {How do I control what version of a plug-in I use?}

~~http://docs.codehaus.org/display/MAVEN/Maven+Plugin+Matrix

* {How do I build more than one project at once?}

