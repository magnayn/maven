 ----
 Maven Getting Started Guide
 -----
 Jason van Zyl
 -----
 12 October 2005
 -----     

Maven Getting Started Guide

 This guide is intended as a reference for those working with Maven for the first time,  but is also intended to serve as
 a cookbook with self-contained references and solutions for common usecases. It is recommended as a first time user
 that you step through the material in a sequential fashion. For users more familiar with Maven the guide endeavours
 to provide a quick solution for the need at hand. It is assumed at this point that you have downloaded Maven and
 installed Maven on your local machine. If you have not done so please refer to the 
 {{{../../download.html}Download and Installation}} instructions.

 Ok, so you now have Maven installed and we're ready to go. Before we jump into our examples we'll very briefly go over
 what Maven is and how it can help you with your daily work and collaborative efforts with team members. Maven will, of
 course, work for small projects but Maven shines in helping teams operate more effectively by allowing team members
 to focus on what the stakeholders of a project require. You can leave the build infrastructure to Maven!

* What is Maven?

 At first glance Maven can appear to be many things, but in a nutshell Maven is an attempt <to apply patterns to
 a project's build infrastructure in order to promote comprehension and productivity by providing a clear path in the
 use of best practices>. Maven is essentially a project management and comprehension tool and as such provides a way to
 help with managing:


 * Builds

 * Documentation

 * Reporting

 * Dependencies

 * SCMs

 * Releases

 * Distribution

 []

 If you want more background information on Maven you can check out {{{background/philosophy-of-maven.html}The Philosophy of Maven}} and
 the {{{background/history-of-maven.html}The History of Maven}}. Now we want to move on to why you, the user, can benefit from
 using Maven.

* How can Maven benefit my development process?

 Maven can provide benefits for your build process by employing standard conventions and practices to accelerate your development
 cycle while at the same time helping you achieve a higher rate of success. For a more detailed look at how
 Maven can help you with your development process please refer to {{{benefits-of-using-maven.html}The Benefits of Using Maven}}.

 Now that we have covered a little bit of the history and purpose of Maven let's get into some real examples to
 get you up and running with Maven!

* How do I make my first Maven project?

 We are going to jump head long into creating your first Maven project!
 To create our first Maven project we are going to use Maven's archetype mechanism. An archetype is defined as
 <an original pattern or model from which all other things of the same kind are made>. In Maven, an archetype is a template
 of a project which is combined with some user input to produce a working Maven project that has been tailored to the
 user's requirements. We are going to show you how the archetype mechanism works now, but if you would to know more about
 archetypes please refer to our {{{introduction-to-archetypes.html}Introduction to Archetypes}}.

 On to creating your first project! In order to create the simplest of Maven projects execute the following from
 the command line:

+-----+

m2 archetype:create -DgroupId=com.mycompany.app -DartifactId=my-app

+-----+

 Once you have executed this command you will notice a few things have happened. First you will notice that
 a file names <<<pom.xml>>> has been created which should look like this:

+-----+

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Maven Quick Start Archetype</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>

+-----+

 What is contained in the <<<pom.xml>>> is the Project Object Model (POM) for this project. The POM is the basic unit
 of work in Maven. This is important to remember because Maven is inherently project-centric in that everything revolves
 around the notion of a project. In short, the POM contains every important piece of information about your project and
 is essentially one-stop-shopping for finding anything related to your project. Understanding the POM is important and
 new users are encouraged to refer to the {{{introduction-to-the-pom.html}Introduction to the POM}}.

  This is a very simple POM but still displays the key elements every POM contains so lets walk through each of them
  to familiarize you with the POM essentials:

  * <<project>> This is the top-level element in all Maven pom.xml files.

  * <<modelVersion>> This element indicates what version of the object model this POM is using. The version of the
    model itself changes very infrequently but it is mandatory in order to ensure stability of use when and if
    the Maven developers deem a change to the model necessasry.

  * <<groupId>> This element indicates the unique groupId of the organization or group that created the project.
    The groupId is on of the key identifiers of a project and is typically based on the fully qualified
    domain name of your organization. For example  <<<org.apache.maven.plugins>>> is the designated groupId for
    all Maven plug-ins.

  * <<artifactId>> This element indicates the unique base name of the primary artifact being generated by this project.
    The primary artifact for a project is typically a JAR file. Secondary artifacts like source bundles also use
    the artifactId as part of their final name. A typical artifact produced by would have the form
    \<artifactId\>-\<version\>.\<extension\>.

  * <<packaging>> This element indicates the packing to be used by this artifact. This not only means if the artifact
    produced is JAR, WAR, or EAR but can also indicate a specific lifecycle to use as part of the build process. This
    is a topic we will deal with further on in the guide, just keep in mind the indicated packaging of a project
    can play a part in customizing the build lifecycle. The default value for the <<<packaging>>> element is JAR
    so you do not have to specify this for most projects.

  * <<version>> This element indicates the version of the artifact generated by the project. Maven goes a long way
    to help you with version management and you will often see the <<<SNAPSHOT>>> designator in a version which
    indicates a project is in a state of development. We will discuss the use of snapshots and how they work further
    on in the guide.

  * <<name>> This element indicates the display name used for the project. This name is often used in Maven's
    generated documentation.

  * <<url>> This element indicates where the project's site can be found. This url is often used in Maven's
    generated documentation.

  []

 For a complete reference of what elements are available for use in the POM please refer to our {{{../../maven-model/maven.html}POM Reference}}.
 Now let's get back to the project at hand.

 After the archetype generation of your first project you will also notice that the following directory structure
 has been created:

+-----+

my-app
|-- pom.xml
`-- src
    |-- main
    |   `-- java
    |       `-- com
    |           `-- mycompany
    |               `-- app
    |                   `-- App.java
    `-- test
        `-- java
            `-- com
                `-- mycompany
                    `-- app
                        `-- AppTest.java

+-----+

 As you can see, the project created from the archetype has a POM, a source tree for you applications sources and
 a source tree for your test sources. This is the standard layout for Maven projects where the application sources
 reside in <<<${basedir}/src/main/java>>> and test sources reside in <<<${basedir}/src/test/java>>>.

 If you were to create a Maven project by hand this is the directory structure that we recommend using. This is a
 Maven convention and to learn more about it you can read our
 {{{introduction-to-the-standard-directory-layout.html}Introduction to the Standard Directory Layout}}.

 Now that we have a POM, some application sources, and some test sources you are probably asking ...

* How do I compile my application sources?

 Execute the following command to compile your application sources:

+-----+

m2 compile

+-----+

 Upon executing this command you should see output like the following:

+-----+

[INFO] ----------------------------------------------------------------------------
[INFO] Building Maven Quick Start Archetype
[INFO]    task-segment: [compile]
[INFO] ----------------------------------------------------------------------------
[INFO] artifact org.apache.maven.plugins:maven-resources-plugin: checking for updates from central
[INFO] artifact org.apache.maven.plugins:maven-compiler-plugin: checking for updates from central
[INFO] [resources:resources]
[INFO] [compiler:compile]
Compiling 1 source file to /tmp/my-app/target/classes
[INFO] ----------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ----------------------------------------------------------------------------
[INFO] Total time: 5 seconds
[INFO] Finished at: Fri Sep 23 15:48:34 GMT-05:00 2005
[INFO] Final Memory: 2M/6M
[INFO] ----------------------------------------------------------------------------

+-----+

 As you can see from the output the compiled classes where placed in <<<${basedir}/target/classes>>> which is
 another standard convention employed by Maven. So, if you're a keen observer you'll notice that using the
 standard conventions the POM above is very small and you haven't explicity had to tell Maven where any of
 your sources are or where the output should go. By following the standard Maven conventions you can get
 a lot done with very little effort! Just as a casual comparison lets take a look at what you might have had to do
 in {{{http://ant.apache.org}Ant}} to accomplish the same {{{../../ant/build-a1.xml}thing}}.

 Now this is simply to compile a single tree of application sources and the Ant script shown is pretty much the same
 size as the POM shown above. But we'll see how much more we can do with just that simple POM above!

* How do I compile my test sources and run my unit tests?

 So you can now compile your applications sources and now you've got some unit tests that you want to compile
 and execute because every programmer always writes and executes their unit tests (nudge nudge wink wink).

 Execute the following command:

+----+

m2 test

+----+

 Upon executing this command you should see output like the following:

+----+

[INFO] ----------------------------------------------------------------------------
[INFO] Building Maven Quick Start Archetype
[INFO]    task-segment: [test]
[INFO] ----------------------------------------------------------------------------
[INFO] [resources:resources]
[INFO] [compiler:compile]
Compiling 1 source file to /home/jvanzyl/js/org.apache.maven/components/trunk/maven-site/my-app/target/classes
[INFO] [resources:testResources]
[INFO] [compiler:testCompile]
Compiling 1 source file to /home/jvanzyl/js/org.apache.maven/components/trunk/maven-site/my-app/target/test-classes
[INFO] [surefire:test]
[INFO] Setting reports dir: /home/jvanzyl/js/org.apache.maven/components/trunk/maven-site/my-app/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
[surefire] Running com.mycompany.app.AppTest
[surefire] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.005 sec

Results :
[surefire] Tests run: 1, Failures: 0, Errors: 0

[INFO] ----------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ----------------------------------------------------------------------------
[INFO] Total time: 2 seconds
[INFO] Finished at: Mon Oct 03 15:06:22 GMT-05:00 2005
[INFO] Final Memory: 2M/6M
[INFO] ----------------------------------------------------------------------------

+----+

 If you simply want to compile your test sources you can execute the following which does not run your unit tests:

+----+

 m2 test-compile

+----+

 Now that you can compile your application sources and compile your tests and execute them you'll want to move
 on to the next logical step so you'll be asking ...

* How do I create a JAR and install it in my local repository?

 Making a JAR file is straight forward enough and can be accomplished by executing the following command:

+----+

m2 package

+----+

 If you take a look at the POM for this project you will notice the <<<packaging>>> element is set to <<<jar>>>.
 This is how Maven knows to produce a JAR file from the above command and we'll talk more about this later.
 You can now take a look in the the <<<${basedir}/target>>> directory and you will see the generated JAR file.



+----+

m2 install

+----+


+----+

~~* How do I package resources inside my JAR?
~~  o EIDSL

~~* How do I filter resources against a properties file?

~~* How do I filter resources against my POM?

FYI - In beta-2, while the other technique is still supported, the
recommended way is finally settled:

chatting with emm in irc and src/main/filters seems like a good place for filter files.

<build>
  <filters>
    <filtersFile>...</filtersFile>
  </filters>
</build>

~~* How do use resources with my tests?
~~  o EIDSL

~~* How do I use external dependencies?
~~  o Explain the use of repositories, remote and local

~~* How do I setup a proxy if I'm behind a firewall so I can get my external dependencies?

~~* How do I install my JAR in my local repository?
~~  o Explain the standard layout of the m2 repository

~~* How do I deploy my jar in my remote repository?

~~* How do I deploy my jar in Ibiblio?

~~* How do I create documentation?
~~  o Explain the different formats APT/xdoc/docbook/FAQML

~~* How do I generate my site?

~~* How do I use plug-ins?
  o Explain that a plug-in consists of one or more mojos
~~* How do I control what version of plug-in I use?

~~* How do I generate reports?

~~* How do I internationalize my site?

~~http://docs.codehaus.org/display/MAVEN/Maven+Plugin+Matrix

+-----+

multiple repositories

<project>
...
  <repositories>
    <repository>
      <id>central</id>
      <name>Maven Repository Switchboard</name>
      <url>http://repo1.maven.org/maven2</url>
    </repository>
    <repository>
      <id>my-repo</id>
      <name>your custom repo</name>
      <url>http://jarsm2.dyndns.dk</url>
    </repository>
  </repositories>
...
</project>

if you specify repositories in profiles you must remember to activate that
particular profile!

and the use of mirrors

==

Project properties

Actually, no. It's *like* the properties defined in profiles in syntax,
but this is a properties section that is specified as a direct child of
the <project> element. So:

<project>
~  ...
~  <properties>
~    <name>value</name>
~  </properties>
</project>

==

Profile inheritance the same as standard inheritence and resources sets are currently not
inherited.

DefaultModelInheritenceAssembler.

Merged:
- dependencies
- developers and contributors
- plugin lists (including reports)
- plugin executions with matching ids
- plugin configuration

==

System vars are accessed implicitly in m2...try:

<configuration>
  <debug>${build.debug}</debug>
  <source>${build.jdk}</source>
  <target>${build.jdk}</target>
</configuration>

==

How to attach sources to a release?

> How does the sources plugin realize that it is part of a snapshot
> build, and therefore not generate a sources JAR?
>
> I didn't notice anything obvious in the source code for the Mojo at

It only does so when the release profile (see the root POM) is activated.

==

How do I get the list of artifacts within my plugin?

You must use the @requiresDependencyResolution tag in your plugin.

==

How to best setup a multi-module build and make versions easiest to manage


==

Integrate Jesse's archetype work.

And how do I make archetypes for use in my organization?

==

How to do a test release and deployment. Trying to work through this with
raphael at the moment.

==

How to get started behind an NTLM proxy.

use the fat http client and add it as an extension to the POM. Do we
support ntmlv2:

http://www.mail-archive.com/httpclient-dev@jakarta.apache.org/msg01861.html

==

Using extensions and why they are needed.

==

How to use Ant constructs from m2.

==

How maven's classloaders work

==

How artifact resolution works, this would be a long one more advanced in
scope.

==

Archetype generation problems:

This looks like:
http://jira.codehaus.org/browse/MNG-916

Please check ~/.m2/plugin-registry.xml - if that has RELEASE as a
version in there somewhere, remove it - that should correct the
problem.

==

When creating your own lifecycles:

This is a missing instruction on the build lifecycle page. You need to
add the plugin to the project, <extensions>true</extensions>

==

How snapshots works

==

How do i use the lifecycle provided by a plugin:

make sure you turn on the extension option

         <packaging>nbm</packaging>, <build><plugins><plugin><groupId/><artifactId/><extensions>true</extensions></plugin></plugins></build>

==

What expressions are available for use in the mojos?

           <jason> maybe i can generate doco from @tags in the expression evaluator or something
<jason> that's where it's localized right?
<jdcasey> um, sort of
<jdcasey> we have the roots there, but we're using the ReflectionValueExtractor from there
<jdcasey> it can easily get pretty ugly
<jason> i'll make a list of those
<jdcasey> I'm thinking of making a mapping resource for expressions, for use in the error diagnoser...maybe we can reuse that?
<jason> of the ones that are not referenced in the plugin expression evaluator where can i find them?
<jason> sure
<jason> a single place would be nice
<jdcasey> they're (a) listed in the expression evaluator, (b) available as POM properties, (c) available as system properties, or (d) available reflectively from the api rooted in one of the four or five data objects
<jdcasey> yup, I think we need that

note from andy

             Jason,

Follow up to our irc chat about suggesting that windows m2 users move their
repos to a location without embedded spaces. I think it would be helpful to
people if we were to place a notification about this in a prominent place
on the M2 site and in the getting started guide.  Parting of the marketing
chat could be "Windows M2 Users Prepare for surefire and Java compiler
forking by moving your M2 repository to a file system location that doesn't
contain embedded spaces!"

The default user.home on windows is c:\documents and settings\<username>\

The repo location can be changed in the settings.xml file located at
${user.home}/.m2/settings.xml

I've pasted an example of a trivial modified settings.xml file below.

<settings>
   <localRepository>F:\m2-repository\repository</localRepository>
</settings>

+-----+
