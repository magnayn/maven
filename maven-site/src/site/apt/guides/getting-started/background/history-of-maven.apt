 ------
 History of Maven 
 ------
 Jason van Zyl
 ------
 12 October 2005
 ------

History of Maven by Jason van Zyl

 Maven began its life in the {{{http://jakarta.apache.org}}Jakarta {{{ http://jakarta.apache.org/alexandria/legacy/}}Alexandria}
 project. The Alexandria project is now defunct but was the breeding ground for not only Maven, but for the
 {{{http://gump.apache.org}}Gump} and {{http://forrest.apache.org}}Forrest} projects as well. From the old
 {{{http://cvs.apache.org/viewcvs.cgi/jakarta-alexandria/proposal/maven/?hideattic=0}}CVS} archive
 you can see that as of the date of this document Maven was removed from Alexandria about 3 years, 7 months ago
 making Maven about 4 years old! Maven spent about 5 months as part of the Alexandria before moving on to its next home
 in the {{{http://jakarta.apache.org/turbine}}Turbine} project.

 Though Maven started in Alexandria the testbed for its use was the Turbine project. Turbine was in the process of
 decoupling its persistence layer, services layer and web layer into separate builds and I got very tired of having
 to maintain several different builds which were essentially the same. There was no way to easy template Ant builds
 in those days and every ant build appeared to be different and I found this incredibly frustrating and futile. I figured
 who really cares how the build works so long as it works and is easy to use. The infrastructure of a project is
 incredibly important but the value of a project lies in the application being developed. As such the build is
 generally neglected and tends to fall apart in times of great need like when you need to prepare a release or when
 more then a couple people diddle with it. In Jakarta land four years ago it was rare that a Ant build worked out of
 the box. Mind you many Turbine developers suffered as I tried to get Maven working which is something I regret, but
 I figure how do new projects start and survive if someone doesn's suffer. I figured it was for their own good
 and after much gnashing of teeth I think Maven has finally come of age. It reminds me of one of my favourite quotes
 from Ralph Johnson and Don Roberts in Patterns for Evolving Frameworks:

+-----+
People develop abstractions by generalizing from concrete examples. Every attempt to determine the correct abstraction
on paper without actually developing a running system is doomed to failure. No one is that smart. A framework is a
resuable design, so you develop it by looking at the things it is supposed to be a design of. The more examples
you look at, the more general your framework will be.
+-----+

 I didn't really know what the final result would look like I just knew there had to be a better way.
 But to start with I know I wanted:

 * <<A model for a project>> so you could look in one place for everything that pertained to the project

 * <<A standard directory structure>> so you didn't have to go fishing around for libraries, sources and documentation

 So started using a model with a simple XML representation and picked what I thought were some decent standards for
 a directory structure and that's how it started. I was still using Ant under the covers but I had some standard targets
 that could be used in each of the Turbine builds and that made me happy.

 As noted above one of the projects in Alexandria at the time was Gump. Sam Ruby tried to convince me that using
 the Gump model would be a good idea so I took a look. After taking a look the descriptors I noted that Gump
 pretty much allowed any project to do whatever it wanted in terms of directory structure and use of JARs in CVS
 as Gump was not trying to standardize anything at the time but trying to continously integrate anything it could
 get its hands on. My goals were different and I wanted to make an
 {{{http://www.oreillynet.com/pub/a/network/2005/08/30/ruby-rails-david-heinemeier-hansson.html}}opinionated} piece
 of software and I preferred the notion of convention over configuration. I wanted a project's infrastructure to
 look the same and work the same so I continued to pursue my own model for a project and decided to disagree with
 Gump's particular tact at project modelling which I thought was too flexible.

 The next thing I noticed were all the JARs that we were storing in CVS. We had many copies of Xerces laying around
 which is a waste of space but more important was that every time the version of Xerces changed I had to update the
 copies of Xerces in each of the projects. This is when I decided to employ standard Java-like inheritance in the
 model used and find a way to create a repository for things you need to build. So I hacked in some inheritance
 goop and now it was time for the repository.

 ~~ jar jar
 ~~ ibiblio reasons
 ~~ maven top-level project
 ~~ use of jelly
 ~~ move toward 1.0
 ~~ development of m2
 ~~ present day
