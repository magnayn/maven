 ------
 Guide to Configuring Plug-ins
 ------
 Jason van Zyl
 ------
 12 October 2005
 ------

Guide to Configuring Plug-ins

 In Maven plug-ins are configured by specifying a <<<configuration>>> element where the child elements of the
 <<<configuration>>> element are mapped to fields, or setters, inside your Mojo (remember that a plug-in consists of
 one or more Mojos where a Mojo maps to a goal). Say, for example, we had a Mojo that performed a query against
 a particular URL, with a specified timeout and list of options. The Mojo might look like the following:

+----+

public class MyQueryMojo
    extends AbstractMojo
{
    private String url;

    private int timeout;

    private String[] options;

    public void execute()
        throws MojoExecutionException
    {
        ...
    }
}

+----+

 To configure the Mojo from your POM with the desired URL, timeout and options you might have something like
 the following:

+----+

<project>
  ...
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <url>http://www.foobar.com/query</url>
          <timeout>10</timeout>
          <options>
            <option>one</option>
            <option>two</option>
            <option>three</option>
          </options>
        </configuration>
      </plugin>
    </plugins>
  </build>
  ...
</project>

+----+

 As you can see the elements in the configuration match the names of the fields in the Mojo. The configuration
 mechanism Maven employs is very similar to the way {{{http://xstream.codehaus.org}XStream}} works where elements
 in XML are mapped to objects. So from the example above you can see that the mapping is pretty straight forward the
 <<<url>>> element maps to the <<<url>>> field, the <<<timeout>>> element maps to the <<<timeout>>> field and the
 <<<options>>> element maps to the <<<options>>> field. The mapping mechanism can deal with arrays by inspecting
 the type of the field and determining if a suitable mapping is possible.


* Mapping complex objects

  Mapping complex types is also fairly straight forward in Maven so let's look at a simple example where we
  are trying to map a configuration for Person object. The <<<configuration>>> element might look like the
  following:

+----+

...
<configuration>
 <person>
   <firstName>Jason</firstName>
   <lastName>van Zyl</lastName>
 </person>
</configuration>
...

+----+

 The rules for mapping complex objects are as follows:

 * There must be a private field that corresponds to name of the element being mapped. So in our case the
   <<<person>>> element must map to a <<<person>>> field.

 * The object instantiated must be in the same package as the Mojo itself. So if your mojo is in
   <<<com.mycompany.mojo.query>>> then the mapping mechanism will look in that package for an
   object named <<<Person>>>. As you can see the mechanism will capitalize the first letter of
   the element name and use that to search for the object to instantiate.

 * If you wish to have the object to be instantiated live in a different package or have a more
   complicated name then you must specify this using an <<<implementation>>> attribute like the
   following:

 []

+----+

...
<configuration>
 <person implementation="com.mycompany.mojo.query.SuperPerson">
   <firstName>Jason</firstName>
   <lastName>van Zyl</lastName>
 </person>
</configuration>
...

+----+


* Mapping to collections

 The configuration mapping mechanism can easily deal with most collections so let's go through a few examples
 to show you how it's done:

** Mapping lists

** Mapping maps

** Mapping properties

* Using setters

 You are not restricted to using private field mapping which is good if you are trying to make you Mojos resuable
 outside the context of Maven. Using the example above we could name our private fields using the underscore
 convention and provide setters that the configuration mapping mechanism can use. So our Mojo would look
 like the following:

+----+

public class MyQueryMojo
    extends AbstractMojo
{
    private String _url;

    private int _timeout;

    private String[] _options;

    public void setUrl( String url ){ _url = url; }

    public void setTimeout( int timeout ){ _timeout = timeout; }

    public void setOptions( String[] options ){ _options = options; }

    public void execute()
        throws MojoExecutionException
    {
        ...
    }
}

+----+
