 ------
 Introduction to Repositories
 ------
 Jason van Zyl
 ------
 12 October 2005
 ------

Introduction to Repositories

* Artifact Repositories

 A repository in Maven is used to hold build artifacts and dependencies of varying types.

 There are strictly only two types of repositories: local and remote. The local repository refers to a copy
 on your own installation that is a cache of the remote downloads, and also contains the temporary
 build artifacts that you have not yet released.

 Remote repositories refer to any other type of repository, accessed by a variety of protocols such as
 <<<file://>>> and <<<http://>>>. These repositories might be a truely remote repository
 set up by a third party to provide their artifacts for downloading (for example,
 <a href="http://www.ibiblio.org/maven/">Ibiblio</a> houses Maven's central repository).
 Other "remote" repositories may be <a href="../reference/internal-repositories.html">internal repositories</a>
 set up on a file or HTTP server within your company, used to share private artifacts between development teams
 and for releases.

 The local and remote repositories are structured the same way so that scripts can easily be run on either
 side, or they can be synced for offline used. In general use, the layout of the repositories is completely
 transparent to the Maven user, however.

* Why not Store JARs in CVS?

 It is not recommended that you store your JARs in CVS. Maven tries to
 promote the notion of a user local repository where JARs, or any
 project artifacts, can be stored and used for any number of builds.
 Many projects have dependencies such as XML parsers and standard utilities that
 are often replicated in typical builds. With Maven these standard utilities
 can be stored in your local repository and shared by any number of builds.

 This has the following advantages:

 * <<It uses less storage>> - while a repository is typically quite large, because each JAR is only kept
   in the one place it is actually saving space, even though it may not seem that way</li>

 * <<It makes checking out a project quicker>> - initial checkout, and to a small degree updating, a
   project will be faster if there are no large binary files in CVS. While they may need to be downloaded
   again afterwards anyway, this only happens once and may not be necessary for some common JARs already in
   place.

 * <<No need for versioning>> - CVS and other source control systems are designed for versioning files,
   but external dependencies typically don't change, or if they do their filename changes anyway to indicate the
   new version. Storing these in CVS doesn't have any added benefit over keeping them in a local artifact cache.


* Using Repositories

  In general, you should not need to do anything with the local repository on a regular basis, except clean
  it out if you are short on disk space (or erase it completely if you are willing to download everything again).

  For the remote repositories, they are used for both downloading and uploading (if you have the permission to
  do so).

** Downloading from a Remote Repository">

 Downloading in Maven is triggered by a project declaring a dependency that is not present in the local
 repository (or for a <<<SNAPSHOT>>>, when the remote repository contains one that is newer).
 By default, Maven will download from Ibiblio.

 To override this, you need to specify a <<<repositories>>> element as follows:

+----+

<project>
  ...
  <repositories>
    <repository>
      <id></id>
      <url></url>
    </repository>
  </repositories>
  ...
</project>

+----+

 You can set this in your <code>~/build.properties</code> file to globally use a certain mirror, however
 note that it is common for a project to customise the repository in their <code>project.properties</code>
 and that your setting will take precedence. If you find that dependencies are not being found, check you
 have not overridden the remote repository.

 (Future versions should allow you to use a setting of
 <<<${maven.repo.remote},http://planetmirror.com/maven>>>, but currently this causes an infinite recursion).

 For more information on dependencies, see <a href="managing-dependencies.html">Handling Dependencies</a>.

* Building Offline

 If you find you need to build your projects offline you can either use the offline switch on the CLI:

+---+

 mvn -o package

+---+

 Note that many plugins will honour the offline setting and not perform any operations that would connect to
 the internet. Some examples are resolving Javadoc links and link checking the site.

* Uploading to a Remote Repository">

 While this is possible for any type of remote repository, you must have the permission to do so.
 To have someone upload to the central Maven repository, see {{../guide/guide-ibiblio-upload.html}Uploading to Ibiblio}}.

Internal Repositories

 When using Maven, particularly in a corporate environment, connecting to the internet to download dependencies
 is not acceptable for security, speed or bandwidth reasons. For that reason, it is desirable to set up an
 internal repository to house a copy of artifacts, and to publish private artifacts to.

 Such an internal repository can be downloaded from using HTTP or the file system (using a <code>file://</code>
 URL), and uploaded to using SCP, FTP, or a file copy.

 Note that as far as Maven is concerned, there is nothing special about this repository: it is another
 <<remote repository>> that contains artifacts to download to a user's local cache, and is a publish
 destination for artifact releases.

 Additionally, you may want to share the repository server with your generated project sites. For more
 information on creating and deploying sites, see <a href="../using/site.html">Creating a Site</a>.

* Setting up the Internal Repository

 To set up an internal repository just requires that you have a place to put it, and then start copying
 required artifacts there using the same layout as in a remote repository such as {{{http://www.ibiblio.org/maven/}Ibiblio}}.

 It is <not> recommended that you scrape or <<<rsync://>>> a full copy of Ibiblio as there is a large amount
 of data there. You can use a program such as <a href="http://maven-proxy.codehaus.org/">Maven Proxy</a>,
 running on your internal repository's server, to download from the internet as required and then hold
 the artifacts in your internal repository for faster downloading later.

 The other options available are to manually download and vet releases, then copy them to the internal
 repository, or to have Maven download them for a user, and manually upload the vetted artifacts to the
 internal repository which is used for releases. This step is the only one available for artifacts where
 the license forbids their distribution automatically, such as several J2EE JARs provided by Sun.
 Refer to the {{{../mini/guide-coping-with-sun-jars.html}Guide to coping with SUN JARs}} document for more information.

 It should be noted that Maven intends to include enhanced support for such features in the future,
 including click through licenses on downloading, and verification of signatures.

* Using the Internal Repository

 Using the internal repository is quite simple. Simply make a change to add a <<<repositories>>> element:

+----+

<project>
   ...
   <repositories>
     <repository>
      <id></id>
     <repository>
   </repositories>
   ...
</project>

+----+

* Deploying to the Internal Repository

 One of the most important reasons to have one or more internal repositories is to be able to publish
 your own private releases to share.

 To publish to the repository, you will need to have access via one of SCP, SFTP, FTP, or the filesystem.
 For example, to set up an SCP transfer. ~~ show the scp example.
