 -------
 Plugin Development Guide - Your First Mojo
 -------
 Bob Allison
 -------
 12 October 2005
 -------

Your First Mojo

  At its simplest, a Java mojo consists simply of a single class.  There is
  no requirement for multiple classes like EJBs, although a plugin which
  contains a number of similar mojos is likely to use an abstract
  superclass for the mojos to consolidate code common to all mojos.

  When processing the source tree to find mojos, the class
  <<<org.apache.maven.tools.plugin.extractor.java.JavaMojoDescriptorExtractor>>>
  looks for classes with a "<<<goal>>>" annotation on the class.  Any class
  with this annotation are included in the plugin configuration file.

A Simple Mojo

  Listed below is a simple mojo class which has no parameters.  This is
  about as simple as a mojo can be.  After the listing is a description
  of the various parts of the source.

+---+
package sample.plugin;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;

/**
 * @goal sayhi
 * @description Says "Hi" to the user
 */
public class GreetingMojo extends AbstractMojo {
    public void execute() throws MojoExecutionException {
        getLog().info("Hello, world.");
    }
}
+---+

  * The class <<<org.apache.maven.plugin.AbstractMojo>>> provides most of the
    infrastructure required to implement a mojo except for the
    <<<execute>>> method.

  * The comment lines starting with "<<<@goal>>>" and "<<<@description>>>"
    are examples of annotations.  These two annotations are required, but
    there are a number of annotations which can be used to control how and
    when the mojo is executed.

  * The <<<execute>>> method can throw two exceptions:

    * <<<org.apache.maven.plugin.MojoExecutionException>>> if an unexpected
      problem occurs.  Throwing this exception causes a "BUILD ERROR" message
      to be displayed.

    * <<<org.apache.maven.plugin.MojoFailureException>>> if an expected
      problem (such as a compilation failure) occurs.  Throwing this exception
      causes a "BUILD FAILURE" message to be displayed.

  * The <<<getLog>>> method (defined in <<<AbstractMojo>>>) returns a
    log4j-like logger object which allows plugins to create messages at levels
    of "debug", "info", "warn", and "error".  This logger is the accepted means
    to display information to the user.
